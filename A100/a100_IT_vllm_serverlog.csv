INFO 08-24 03:30:42 [__init__.py:241] Automatically detected platform cuda.
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:30:43 [api_server.py:1805] vLLM API server version 0.10.1.1
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:30:43 [utils.py:326] non-default args: {'host': '0.0.0.0', 'model': 'aisingapore/Gemma-SEA-LION-v4-27B-IT', 'max_model_len': 8192}
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:30:50 [__init__.py:711] Resolved architecture: Gemma3ForConditionalGeneration
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:30:50 [__init__.py:1750] Using max model len 8192
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:30:50 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=2048.
INFO 08-24 03:31:00 [__init__.py:241] Automatically detected platform cuda.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:01 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:01 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='aisingapore/Gemma-SEA-LION-v4-27B-IT', speculative_config=None, tokenizer='aisingapore/Gemma-SEA-LION-v4-27B-IT', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=aisingapore/Gemma-SEA-LION-v4-27B-IT, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:03 [parallel_state.py:1134] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=4776)[0;0m WARNING 08-24 03:31:04 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=4776)[0;0m Using a slow image processor as `use_fast` is unset and a slow processor was saved with this model. `use_fast=True` will be the default behavior in v4.52, even if the model was saved with a slow processor. This will result in minor differences in outputs. You'll still be able to use a slow processor with `use_fast=False`.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:10 [gpu_model_runner.py:1953] Starting to load model aisingapore/Gemma-SEA-LION-v4-27B-IT...
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:10 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:10 [cuda.py:345] Using FlexAttention backend for head_size=72 on V1 engine.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:11 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:31:11 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:34:52 [weight_utils.py:312] Time spent downloading weights for aisingapore/Gemma-SEA-LION-v4-27B-IT: 221.185958 seconds
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/12 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:   8% Completed | 1/12 [00:00<00:04,  2.39it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  17% Completed | 2/12 [00:00<00:04,  2.09it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  25% Completed | 3/12 [00:01<00:04,  1.99it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  33% Completed | 4/12 [00:01<00:04,  1.95it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  42% Completed | 5/12 [00:02<00:03,  1.93it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  50% Completed | 6/12 [00:02<00:02,  2.49it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  58% Completed | 7/12 [00:03<00:02,  2.50it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  67% Completed | 8/12 [00:03<00:01,  2.27it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  75% Completed | 9/12 [00:04<00:01,  2.13it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  83% Completed | 10/12 [00:04<00:01,  2.00it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards:  92% Completed | 11/12 [00:05<00:00,  1.92it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards: 100% Completed | 12/12 [00:05<00:00,  1.89it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m Loading safetensors checkpoint shards: 100% Completed | 12/12 [00:05<00:00,  2.05it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m 
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:34:59 [default_loader.py:262] Loading weights took 5.98 seconds
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:34:59 [gpu_model_runner.py:2007] Model loading took 51.4478 GiB and 228.177586 seconds
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:34:59 [gpu_model_runner.py:2591] Encoder cache will be initialized with a budget of 2048 tokens, and profiled with 7 image items of the maximum feature size.
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:35:11 [backends.py:548] Using cache directory: /root/.cache/vllm/torch_compile_cache/c67a70cd67/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:35:11 [backends.py:559] Dynamo bytecode transform time: 10.78 s
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:35:14 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:01 [backends.py:215] Compiling a graph for dynamic shape takes 49.33 s
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:17 [monitor.py:34] torch.compile takes 60.11 s in total
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:18 [gpu_worker.py:276] Available KV cache memory: 17.29 GiB
[1;36m(EngineCore_0 pid=4776)[0;0m WARNING 08-24 03:36:19 [kv_cache_utils.py:971] Add 8 padding layers, may waste at most 15.38% KV cache memory
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:19 [kv_cache_utils.py:1013] GPU KV cache size: 32,368 tokens
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:19 [kv_cache_utils.py:1017] Maximum concurrency for 8,192 tokens per request: 8.48x
[1;36m(EngineCore_0 pid=4776)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   1%|▏         | 1/67 [00:00<00:09,  6.87it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:09,  6.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:09,  6.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:09,  6.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   7%|▋         | 5/67 [00:00<00:09,  6.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:08,  6.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:01<00:08,  6.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:01<00:08,  6.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:01<00:08,  6.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:01<00:08,  6.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:01<00:08,  6.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:01<00:07,  6.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  19%|█▉        | 13/67 [00:01<00:07,  6.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:02<00:07,  6.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:02<00:07,  6.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:02<00:07,  6.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:02<00:06,  7.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:02<00:06,  7.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:02<00:06,  7.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:02<00:06,  7.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:02<00:05,  7.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:03<00:05,  8.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:03<00:05,  8.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:03<00:05,  8.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  37%|███▋      | 25/67 [00:03<00:04,  8.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:03<00:04,  8.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:03<00:04,  8.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:03<00:04,  8.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  43%|████▎     | 29/67 [00:03<00:04,  8.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:03<00:04,  8.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:04<00:04,  8.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:04<00:04,  8.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:04<00:03,  9.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:04<00:03,  9.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:04<00:02,  9.87it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:04<00:02, 10.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:05<00:02, 10.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:05<00:02, 10.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:05<00:02, 10.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:05<00:01, 10.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:05<00:01, 10.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:06<00:01, 11.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:06<00:01, 11.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:06<00:00, 12.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:06<00:00, 12.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:06<00:00, 12.55it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:06<00:00, 12.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:06<00:00, 13.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:07<00:00, 13.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:07<00:00,  9.33it/s]
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:27 [gpu_model_runner.py:2708] Graph capturing finished in 8 secs, took 1.01 GiB
[1;36m(EngineCore_0 pid=4776)[0;0m INFO 08-24 03:36:27 [core.py:214] init engine (profile, create kv cache, warmup model) took 87.61 seconds
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:28 [loggers.py:142] Engine 000: vllm cache_config_info with initialization after num_gpu_blocks is: 14163
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:28 [api_server.py:1611] Supported_tasks: ['generate']
[1;36m(APIServer pid=4497)[0;0m WARNING 08-24 03:36:28 [__init__.py:1625] Default sampling parameters have been overridden by the model's Hugging Face generation config recommended from the model creator. If this is not intended, please relaunch vLLM instance with `--generation-config vllm`.
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:28 [serving_responses.py:120] Using default chat sampling params from model: {'top_k': 64, 'top_p': 0.95}
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [serving_chat.py:134] Using default chat sampling params from model: {'top_k': 64, 'top_p': 0.95}
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [serving_completion.py:77] Using default completion sampling params from model: {'top_k': 64, 'top_p': 0.95}
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [api_server.py:1880] Starting vLLM API server 0 on http://0.0.0.0:8000
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:36] Available routes are:
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /openapi.json, Methods: HEAD, GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /docs, Methods: HEAD, GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /docs/oauth2-redirect, Methods: HEAD, GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /redoc, Methods: HEAD, GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /health, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /load, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /ping, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /ping, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /tokenize, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /detokenize, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/models, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /version, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/responses, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/responses/{response_id}, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/responses/{response_id}/cancel, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/chat/completions, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/completions, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/embeddings, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /pooling, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /classify, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /score, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/score, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/audio/transcriptions, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/audio/translations, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /rerank, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v1/rerank, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /v2/rerank, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /scale_elastic_ep, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /is_scaling_elastic_ep, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /invocations, Methods: POST
[1;36m(APIServer pid=4497)[0;0m INFO 08-24 03:36:29 [launcher.py:44] Route: /metrics, Methods: GET
[1;36m(APIServer pid=4497)[0;0m INFO:     Started server process [4497]
[1;36m(APIServer pid=4497)[0;0m INFO:     Waiting for application startup.
[1;36m(APIServer pid=4497)[0;0m INFO:     Application startup complete.
